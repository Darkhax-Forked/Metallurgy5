buildscript {
        repositories {
            jcenter()
            maven {
                name = "forge"
                url = "http://files.minecraftforge.net/maven"
            }
        }
        dependencies {
            classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        }
    }

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}


task buildInfo() {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = "DEV." + proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "${project.buildInfo.revision}"
    }
}

ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${config.mod_version}.${project.buildInfo.buildNum}"
}

if(System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

// Master project info

version = "${config.minecraft_version}-${artifact_version}"

group= "com.teammetallurgy.metallurgy" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Metallurgy"

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
    runDir = "run"

    mappings = config.mcp_mappings
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

subprojects {    
    apply plugin: 'net.minecraftforge.gradle.forge'

    version = "${config.minecraft_version}-${artifact_version}"
    group = "com.teammetallurgy.metallurgy" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

    minecraft {
        version = "${config.minecraft_version}-${config.forge_version}"
        runDir = "run"
        
        mappings = config.mcp_mappings
    }
}
dependencies {
    compile project(':core')
    compile project(':base')
    //compile project(':precious')
}

project (':base'){
    dependencies {
        compile project(':core')
    }
}

// Disabled
/*
project (':precious'){
    dependencies {
        compile project (':core')
    }
}
*/

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path)}

jar {
    subprojects.each { 
        subproject -> from (subproject.configurations.archives.allArtifacts.files.collect {
            it.isDirectory() ? it : zipTree(it)
        }) {
            exclude 'mcmod.info'
            exclude 'META-INF/***'
        }
        
    }
}